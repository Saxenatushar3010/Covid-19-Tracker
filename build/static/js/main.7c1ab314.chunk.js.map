{"version":3,"sources":["App.module.css","components/Cards/Cards.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","value","options","legend","display","title","text","lineChart","borderColor","fill","className","styles","container","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","Info","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","App","state","setState","this","Cards","CountryPicker","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c1ab314.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3uFHZ\",\"image\":\"App_image__9fsub\",\"h1\":\"App_h1__1M5xy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__27NEk\",\"card\":\"Cards_card__3vu94\",\"infected\":\"Cards_infected__1uDF3\",\"recovered\":\"Cards_recovered__1AiQS\",\"deaths\":\"Cards_deaths__2Z6H2\"};","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Info = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'Loading...';\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of active cases of COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of recoveries from COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of deaths caused by COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Info;","import React from 'react';\r\n\r\nimport { Cards, CountryPicker, Chart } from './components';\r\nimport { fetchData } from './api/';\r\nimport styles from './App.module.css';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const data = await fetchData();\r\n\r\n    this.setState({ data });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const data = await fetchData(country);\r\n\r\n    this.setState({ data, country: country });\r\n  }\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        <div> <h1>COVID-19 UPDATE<u/></h1><hr/></div>\r\n       \r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country}/>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__127Jy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2nHgG\"};"],"sourceRoot":""}